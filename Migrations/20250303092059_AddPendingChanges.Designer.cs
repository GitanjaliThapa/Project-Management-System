// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Milestone3Project.Models;

#nullable disable

namespace Milestone3Project.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20250303092059_AddPendingChanges")]
    partial class AddPendingChanges
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "9.0.2");

            modelBuilder.Entity("Milestone3Project.Models.Milestone", b =>
                {
                    b.Property<int>("MilestoneID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("MilestoneDescription")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("MilestoneDueDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("MilestoneName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("ProjectID")
                        .HasColumnType("INTEGER");

                    b.HasKey("MilestoneID");

                    b.HasIndex("ProjectID");

                    b.ToTable("Milestones");
                });

            modelBuilder.Entity("Milestone3Project.Models.Project", b =>
                {
                    b.Property<int>("ProjectID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("ProjectDueDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("ProjectName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("ProjectStartDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("ProjectStatus")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("UserId")
                        .HasColumnType("INTEGER");

                    b.HasKey("ProjectID");

                    b.HasIndex("UserId");

                    b.ToTable("Projects");
                });

            modelBuilder.Entity("Milestone3Project.Models.ProjectTask", b =>
                {
                    b.Property<int>("ProjectTaskID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("ProjectID")
                        .HasColumnType("INTEGER");

                    b.Property<string>("TaskName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("TaskStatus")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("ProjectTaskID");

                    b.HasIndex("ProjectID");

                    b.ToTable("ProjectTasks");
                });

            modelBuilder.Entity("Milestone3Project.Models.Subtask", b =>
                {
                    b.Property<int>("SubtaskID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("ProjectTaskID")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("SubtaskDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("SubtaskDescription")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("SubtaskName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("SubtaskStatus")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("TaskID")
                        .HasColumnType("INTEGER");

                    b.HasKey("SubtaskID");

                    b.HasIndex("ProjectTaskID");

                    b.ToTable("Subtasks");
                });

            modelBuilder.Entity("Milestone3Project.Models.User", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("UserId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("Milestone3Project.Models.Milestone", b =>
                {
                    b.HasOne("Milestone3Project.Models.Project", "Project")
                        .WithMany("Milestones")
                        .HasForeignKey("ProjectID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Project");
                });

            modelBuilder.Entity("Milestone3Project.Models.Project", b =>
                {
                    b.HasOne("Milestone3Project.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Milestone3Project.Models.ProjectTask", b =>
                {
                    b.HasOne("Milestone3Project.Models.Project", "Project")
                        .WithMany("Tasks")
                        .HasForeignKey("ProjectID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Project");
                });

            modelBuilder.Entity("Milestone3Project.Models.Subtask", b =>
                {
                    b.HasOne("Milestone3Project.Models.ProjectTask", "ProjectTask")
                        .WithMany()
                        .HasForeignKey("ProjectTaskID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ProjectTask");
                });

            modelBuilder.Entity("Milestone3Project.Models.Project", b =>
                {
                    b.Navigation("Milestones");

                    b.Navigation("Tasks");
                });
#pragma warning restore 612, 618
        }
    }
}
